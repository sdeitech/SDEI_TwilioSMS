using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using SD_SMS.Helpers;
using SD_SMS.Models;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;
using Twilio;
using Twilio.Clients;
using Twilio.Rest.Api.V2010.Account;
using Twilio.Rest.Chat.V1;
using Twilio.Rest.Verify.V2;
using Twilio.Rest.Verify.V2.Service;
using Twilio.TwiML.Messaging;
using Twilio.Types;
using ServiceResource = Twilio.Rest.Verify.V2.ServiceResource;

namespace SD_SMS.Services
{
    public class SMSService : ISMSService
    {
        private readonly IOptions<TwilioConfig> _twilioConfig;
        private readonly ILogger _logger;
        public SMSService(ILogger<SMSService> logger, IOptions<TwilioConfig> twilioConfig)
        {
            _logger = logger;
            _twilioConfig = twilioConfig;
            // Initializing Twilio client by Twilio Id and Token.
            TwilioClient.Init(_twilioConfig.Value.TwilioId, _twilioConfig.Value.TwilioToken);
        }

        /// <summary>
        /// This method is being used to send SMS using Twilio to given Phone number
        /// </summary>
        /// <param name="request">Request object having PhoneNo and Message to send.</param>
        /// <returns></returns>
        public async Task<ResponseModel> SendSMSAsync(SMSRequest request)
        {
            ResponseModel response = new();
            try
            {
                var message = await MessageResource.CreateAsync(
                    to: new PhoneNumber(request.PhoneNo),
                    from: new PhoneNumber(_twilioConfig.Value.TwilioPhoneNumber),
                    body: request.Message);

                if (message?.Status != null && message.Status != MessageResource.StatusEnum.Failed && message.Status != MessageResource.StatusEnum.Undelivered)
                {
                    response.Status = (int)HttpStatusCode.OK;
                    response.Message = Constants.SMSSuccessMessage;
                    response.Response = new { message.Sid, MessageStatus = message.Status.ToString() };
                }
                else
                {
                    response.Status = (int)HttpStatusCode.BadGateway;
                    response.Message = Constants.SMSFailureMessage;
                    response.Response = new { message?.Sid, MessageStatus = message?.Status.ToString(), message?.ErrorCode, message?.ErrorMessage };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"{Constants.SMSExceptionMessage}: Exception: {ex.Message}. Stack Trace: {ex.StackTrace}");
                response.Status = (int)HttpStatusCode.InternalServerError;
                response.Message = Constants.SMSExceptionMessage;
                response.Errors.Add(
                    new Error
                    {
                        Code = (int)HttpStatusCode.InternalServerError,
                        Message = ex.Message,
                        Description = ex.InnerException?.Message ?? ex.Message,
                        More_Info = ex?.StackTrace
                    });
            }
            return response;
        }

        /// <summary>
        /// This method is being used to retrieve the status of the message by SID generated by Twilio.
        /// </summary>
        /// <param name="sid">This is the SID of the message that gets generated whenever we request to send the message.</param>
        /// <returns></returns>
        public async Task<ResponseModel> RetrieveStatusAsyc(string sid)
        {
            ResponseModel response = new();
            try
            {
                if (!string.IsNullOrEmpty(sid))
                {
                    var messageStatus = await MessageResource.FetchAsync(sid);
                    if (messageStatus != null)
                    {
                        response.Status = (int)HttpStatusCode.OK;
                        response.Message = Constants.GeneralSuccessMessage;
                        response.Response = new { messageStatus?.Sid, MessageStatus = messageStatus?.Status.ToString(), messageStatus?.ErrorCode, messageStatus?.ErrorMessage };
                    }
                    else
                    {
                        response.Status = (int)HttpStatusCode.BadGateway;
                        response.Message = Constants.RetrieveFailureMessage;
                    }
                }
                else
                {
                    response.Status = (int)HttpStatusCode.BadRequest;
                    response.Message = Constants.InvalidSidPassed;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"{Constants.SMSExceptionMessage}: Exception: {ex.Message}. Stack Trace: {ex.StackTrace}");
                response.Status = (int)HttpStatusCode.InternalServerError;
                response.Message = Constants.SMSExceptionMessage;
                response.Errors.Add(
                    new Error
                    {
                        Code = (int)HttpStatusCode.InternalServerError,
                        Message = ex.Message,
                        Description = ex.InnerException?.Message ?? ex.Message,
                        More_Info = ex.StackTrace
                    });
            }
            return response;
        }
    }
}
